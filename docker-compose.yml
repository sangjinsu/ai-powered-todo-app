services:
  # 프론트엔드 React 애플리케이션
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: todo-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - todo-network
    depends_on:
      - nginx

  # Todo 서비스
  todo-service:
    build:
      context: ./services/todo
      dockerfile: Dockerfile
    container_name: todo-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/tododb
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/todo:/app
    networks:
      - todo-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

  # AI 서비스
  ai-service:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    container_name: ai-service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/tododb
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/ai:/app
    networks:
      - todo-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload

  # NGINX API 게이트웨이
  nginx:
    image: nginx:alpine
    container_name: nginx-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - todo-service
      - ai-service
    networks:
      - todo-network

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=tododb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - todo-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  todo-network:
    driver: bridge